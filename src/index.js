// Generated by BUCKLESCRIPT VERSION 4.0.7000, PLEASE EDIT WITH CARE
'use strict';

var Car = require("./car.js");
var Road = require("./road.js");
var Score = require("./score.js");
var Timer = require("./timer.js");
var Common = require("./common.js");
var Control = require("./control.js");
var Reprocessing = require("/Users/jim/Github/returbo/node_modules/reprocessing/src/Reprocessing.js");
var Reprocessing_Env = require("/Users/jim/Github/returbo/node_modules/reprocessing/src/Reprocessing_Env.js");
var Reprocessing_Draw = require("/Users/jim/Github/returbo/node_modules/reprocessing/src/Reprocessing_Draw.js");
var Reprocessing_Utils = require("/Users/jim/Github/returbo/node_modules/reprocessing/src/Reprocessing_Utils.js");

function setup(env) {
  Reprocessing_Env.size(Common.width, Common.height, env);
  return /* record */[
          /* car */Car.init((Common.width / 2 | 0) - 30 | 0, Common.height - 60 | 0, env),
          /* road */Road.init,
          /* control */Control.init,
          /* timer */Timer.init,
          /* score */Score.init
        ];
}

function control(state) {
  var currentRoadDirection = Road.currentDirection(state[/* road */1]);
  var match = Control.isBrake(state[/* control */2]) || Timer.gameOver(state[/* timer */3]);
  var isBrake = match ? true : false;
  var turn = Control.getTurn(state[/* control */2]);
  var car = Car.accelerate(isBrake, Car.roadEffect(currentRoadDirection, Car.turn(turn, state[/* car */0])));
  var position = state[/* road */1][/* position */0] + Car.progression(state[/* car */0]);
  var newRoadState = Road.moveForward(position, state[/* road */1]);
  var match$1 = state[/* road */1][/* lastPiece */1] !== newRoadState[/* lastPiece */1];
  var checkpointBonus = match$1 ? Road.checkpointBonus(newRoadState) : 0;
  var timer = Timer.addTimeInSeconds(checkpointBonus, state[/* timer */3]);
  return /* record */[
          /* car */car,
          /* road */newRoadState,
          /* control */state[/* control */2],
          /* timer */timer,
          /* score */state[/* score */4]
        ];
}

function drawGound(env) {
  Reprocessing_Draw.fill(Reprocessing_Utils.color(20, 150, 20, 255), env);
  return Reprocessing_Draw.quad(/* tuple */[
              0,
              Common.height
            ], /* tuple */[
              Common.width,
              Common.height
            ], /* tuple */[
              Common.width,
              Common.height / 2 | 0
            ], /* tuple */[
              0,
              Common.height / 2 | 0
            ], env);
}

function drawSky(env) {
  Reprocessing_Draw.fill(Reprocessing_Utils.color(5, 5, 200, 255), env);
  return Reprocessing_Draw.quad(/* tuple */[
              0,
              0
            ], /* tuple */[
              Common.width,
              0
            ], /* tuple */[
              Common.width,
              Common.height / 2 | 0
            ], /* tuple */[
              0,
              Common.height / 2 | 0
            ], env);
}

function drawGame(state, env) {
  Reprocessing_Draw.background(Reprocessing_Utils.color(255, 255, 255, 255), env);
  drawGound(env);
  Road.draw(state[/* car */0][/* offset */4], state[/* road */1], env);
  drawSky(env);
  Car.draw(state[/* car */0], env);
  Reprocessing_Draw.fill(Reprocessing_Utils.color(25, 25, 25, 255), env);
  var text = Car.speedInMph(state[/* car */0]);
  Reprocessing_Draw.text(undefined, text, /* tuple */[
        420,
        20
      ], env);
  Reprocessing_Draw.text(undefined, "MPH", /* tuple */[
        480,
        20
      ], env);
  Score.draw(state[/* score */4], env);
  Timer.draw(state[/* timer */3], env);
  return state;
}

function draw(state, env) {
  if (Control.isReset(state[/* control */2])) {
    return setup(env);
  } else {
    var lastPosition = state[/* road */1][/* position */0];
    var state$1 = control(state);
    var score = Score.increment(state$1[/* road */1][/* position */0] - lastPosition, state$1[/* score */4]);
    var timer = Timer.reduce(state$1[/* timer */3]);
    var state_000 = /* car */state$1[/* car */0];
    var state_001 = /* road */state$1[/* road */1];
    var state_002 = /* control */state$1[/* control */2];
    var state$2 = /* record */[
      state_000,
      state_001,
      state_002,
      /* timer */timer,
      /* score */score
    ];
    return drawGame(state$2, env);
  }
}

function keyPressed(state, env) {
  return /* record */[
          /* car */state[/* car */0],
          /* road */state[/* road */1],
          /* control */Control.keyDown(Reprocessing_Env.keyCode(env), state[/* control */2]),
          /* timer */state[/* timer */3],
          /* score */state[/* score */4]
        ];
}

function keyReleased(state, env) {
  return /* record */[
          /* car */state[/* car */0],
          /* road */state[/* road */1],
          /* control */Control.keyUp(Reprocessing_Env.keyCode(env), state[/* control */2]),
          /* timer */state[/* timer */3],
          /* score */state[/* score */4]
        ];
}

Reprocessing.run(setup, undefined, draw, undefined, undefined, undefined, undefined, keyPressed, keyReleased, undefined, /* () */0);

exports.setup = setup;
exports.control = control;
exports.drawGound = drawGound;
exports.drawSky = drawSky;
exports.drawGame = drawGame;
exports.draw = draw;
exports.keyPressed = keyPressed;
exports.keyReleased = keyReleased;
/*  Not a pure module */
