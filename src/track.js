// Generated by BUCKLESCRIPT VERSION 4.0.7000, PLEASE EDIT WITH CARE
'use strict';

var List = require("bsb-native/lib/js/list.js");
var $$Array = require("bsb-native/lib/js/array.js");
var Block = require("bsb-native/lib/js/block.js");
var Caml_array = require("bsb-native/lib/js/caml_array.js");

var $pipe$plus$pipe = List.append;

function make(direction, times) {
  return $$Array.to_list(Caml_array.caml_make_vect(times, direction));
}

function make2(__x) {
  return $$Array.to_list(Caml_array.caml_make_vect(2, __x));
}

function make4(__x) {
  return $$Array.to_list(Caml_array.caml_make_vect(4, __x));
}

function make8(__x) {
  return $$Array.to_list(Caml_array.caml_make_vect(8, __x));
}

function make12(__x) {
  return $$Array.to_list(Caml_array.caml_make_vect(12, __x));
}

function make24(__x) {
  return $$Array.to_list(Caml_array.caml_make_vect(24, __x));
}

var b = $$Array.to_list(Caml_array.caml_make_vect(4, /* Straight */0));

var b$1 = $$Array.to_list(Caml_array.caml_make_vect(24, /* Right */Block.__(1, [0.4])));

var b$2 = $$Array.to_list(Caml_array.caml_make_vect(4, /* Straight */0));

var b$3 = $$Array.to_list(Caml_array.caml_make_vect(12, /* Left */Block.__(0, [0.6])));

var b$4 = $$Array.to_list(Caml_array.caml_make_vect(8, /* Straight */0));

var b$5 = $$Array.to_list(Caml_array.caml_make_vect(8, /* Left */Block.__(0, [0.6])));

var b$6 = $$Array.to_list(Caml_array.caml_make_vect(24, /* Right */Block.__(1, [0.32])));

var b$7 = $$Array.to_list(Caml_array.caml_make_vect(4, /* Straight */0));

var b$8 = $$Array.to_list(Caml_array.caml_make_vect(4, /* Straight */0));

var b$9 = $$Array.to_list(Caml_array.caml_make_vect(8, /* Left */Block.__(0, [0.6])));

var b$10 = $$Array.to_list(Caml_array.caml_make_vect(4, /* Straight */0));

var b$11 = $$Array.to_list(Caml_array.caml_make_vect(4, /* Right */Block.__(1, [1])));

var b$12 = $$Array.to_list(Caml_array.caml_make_vect(8, /* Straight */0));

var b$13 = $$Array.to_list(Caml_array.caml_make_vect(4, /* Left */Block.__(0, [0.6])));

var b$14 = $$Array.to_list(Caml_array.caml_make_vect(4, /* Left */Block.__(0, [0.4])));

var b$15 = $$Array.to_list(Caml_array.caml_make_vect(12, /* Straight */0));

var b$16 = $$Array.to_list(Caml_array.caml_make_vect(4, /* Left */Block.__(0, [0.32])));

var b$17 = $$Array.to_list(Caml_array.caml_make_vect(12, /* Straight */0));

var b$18 = $$Array.to_list(Caml_array.caml_make_vect(2, /* Right */Block.__(1, [0.4])));

var b$19 = $$Array.to_list(Caml_array.caml_make_vect(8, /* Right */Block.__(1, [0.32])));

var b$20 = $$Array.to_list(Caml_array.caml_make_vect(8, /* Right */Block.__(1, [0.24])));

var b$21 = $$Array.to_list(Caml_array.caml_make_vect(8, /* Right */Block.__(1, [0.16])));

var b$22 = $$Array.to_list(Caml_array.caml_make_vect(12, /* Right */Block.__(1, [0.08])));

var b$23 = $$Array.to_list(Caml_array.caml_make_vect(8, /* Right */Block.__(1, [0.08])));

var b$24 = $$Array.to_list(Caml_array.caml_make_vect(8, /* Straight */0));

var b$25 = $$Array.to_list(Caml_array.caml_make_vect(12, /* Right */Block.__(1, [0.16])));

var b$26 = $$Array.to_list(Caml_array.caml_make_vect(4, /* Straight */0));

var b$27 = $$Array.to_list(Caml_array.caml_make_vect(24, /* Left */Block.__(0, [0.08])));

var a = $$Array.to_list(Caml_array.caml_make_vect(8, /* Straight */0));

var a$1 = List.append(a, b$27);

var a$2 = List.append(a$1, b$26);

var a$3 = List.append(a$2, b$25);

var a$4 = List.append(a$3, b$24);

var a$5 = List.append(a$4, b$23);

var a$6 = List.append(a$5, b$22);

var a$7 = List.append(a$6, b$21);

var a$8 = List.append(a$7, b$20);

var a$9 = List.append(a$8, b$19);

var a$10 = List.append(a$9, b$18);

var a$11 = List.append(a$10, b$17);

var a$12 = List.append(a$11, b$16);

var a$13 = List.append(a$12, b$15);

var a$14 = List.append(a$13, b$14);

var a$15 = List.append(a$14, b$13);

var a$16 = List.append(a$15, b$12);

var a$17 = List.append(a$16, b$11);

var a$18 = List.append(a$17, b$10);

var a$19 = List.append(a$18, b$9);

var a$20 = List.append(a$19, b$8);

var a$21 = List.append(a$20, /* :: */[
      /* Checkpoint */Block.__(2, [10]),
      /* [] */0
    ]);

var a$22 = List.append(a$21, b$7);

var a$23 = List.append(a$22, b$6);

var a$24 = List.append(a$23, b$5);

var a$25 = List.append(a$24, b$4);

var a$26 = List.append(a$25, b$3);

var a$27 = List.append(a$26, b$2);

var a$28 = List.append(a$27, b$1);

var a$29 = List.append(a$28, b);

var demoTrack = List.append(a$29, /* :: */[
      /* Checkpoint */Block.__(2, [5]),
      /* [] */0
    ]);

var init = /* record */[/* track */demoTrack];

function isCheckpoint(t) {
  if (typeof t === "number" || t.tag !== 2) {
    return false;
  } else {
    return true;
  }
}

function progress(state) {
  if (List.length(state[/* track */0]) > 15) {
    return /* record */[/* track */List.tl(state[/* track */0])];
  } else {
    return /* record */[/* track */List.tl(List.append(state[/* track */0], demoTrack))];
  }
}

function head(state) {
  return List.hd(state[/* track */0]);
}

var ec1 = 0.08;

var ec2 = 0.16;

var mc1 = 0.24;

var mc2 = 0.32;

var hc1 = 0.4;

var hc2 = 0.6;

exports.ec1 = ec1;
exports.ec2 = ec2;
exports.mc1 = mc1;
exports.mc2 = mc2;
exports.hc1 = hc1;
exports.hc2 = hc2;
exports.$pipe$plus$pipe = $pipe$plus$pipe;
exports.make = make;
exports.make2 = make2;
exports.make4 = make4;
exports.make8 = make8;
exports.make12 = make12;
exports.make24 = make24;
exports.demoTrack = demoTrack;
exports.init = init;
exports.isCheckpoint = isCheckpoint;
exports.progress = progress;
exports.head = head;
/* b Not a pure module */
